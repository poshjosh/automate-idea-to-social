# [llm|browser|blog|generic]  llm is not yet supported
agent-type: browser
# Optional [generate-video|generate-text|post|test|custom]
agent-tags: post
sort-order: 2
browser:
  chrome:
    undetected: true
    options:
      args:
        - user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36
        # Use either (headless and start-maximized) or kiosk
        # Trying to change window size, while using kiosk, will crash the driver
        # Without this custom window size, we got ElementNotInteractableException
        # Window size should match that in docker-entrypoint.sh
        - window-size=1920,1080
        - start-maximized
alternate-source: $TEXT_FILE
stages:
  login:
    url: https://www.youtube.com/
    stage-items:
# !!!NOTE!!! When YouTube gets finicky, try uncommenting this
#      delete-cookies:
#        actions: delete_cookies
      website-cookies:
        search-for:
          - //*[@id="content"]//ytd-button-renderer/yt-button-shape/button/div/span[starts-with(text(), "Accept")]//..//..
          - //*[@id="content"]//ytd-button-renderer//button/div/*[starts-with(text(), "Accept")]//..//..
      proceed-to-login-page:
        events:
          onerror:
            - wait 5
            - retry 1
        search-for:
          - //*[@id="sign-in-button"]//a
          - //*[@id="sign-in-button"]
          - //*[@aria-label="Sign in"]
      fill-email:
        when:
          search-for: $self.stages.login.stage-items.fill-email.search-for
          actions: is_displayed
        search-for: //*[@id="identifierId"]
        actions: send_keys $YOUTUBE_USER_EMAIL
      select-account:
        when:
          search-for: $self.stages.login.stage-items.select-account.search-for
          actions: is_displayed
        events:
          onerror: continue
        search-for:
          - //*[@id="view_container"]//ul/li[contains(text(), "${YOUTUBE_USER_EMAIL}")]
          - //*[@id="view_container"]//ul/li//div[contains(text(), "${YOUTUBE_USER_EMAIL}")]
          - //*[@id="view_container"]/div/div/div[2]/div/div[1]/div/form/span/section/div/div/div/div/ul/li[contains(text(), "${YOUTUBE_USER_EMAIL}")]
          - //*[@id="view_container"]/div/div/div[2]/div/div[1]/div/form/span/section/div/div/div/div/ul/li//div[contains(text(), "${YOUTUBE_USER_EMAIL}")]
          - //*[@id="view_container"]/div/div/div[2]/div/div[1]/div/form/span/section/div/div/div/div/ul/li[1]/div/div[1]/div/div[2]/div[2]
      submit-email:
        search-for:
          - //*[@id="identifierNext"]/div/button
          - //*[@id="identifierNext"]//button[contains(text(), "Next")]
        actions:
          - click
          - wait 2
      fill-password:
        search-for:
          - //*[@id="password"]/div[1]/div/div[1]/input
          - //*[@id="password"]//input[@type="password"]
        actions: enter_text $YOUTUBE_USER_PASS
      submit-password:
        search-for:
          - //*[@id="passwordNext"]/div/button
          - //*[@id="passwordNext"]//button[contains(text(), "Next")]
        actions:
          - click
          - wait 2
  dismiss-alerts:
    events:
      onstart: dismiss_alert 7 # Wait at most 7 seconds for the alert to appear
      onerror: continue
    stage-items:
      dismiss-account-update-option:
        search-for:
          # <span jsname="V67aGc" class="VfPpkd-vQzf8d">Not now</span>
          - //*[@id="yDmH0d"]/div[1]/div[1]/div[2]/div/div/div[3]/div/div[2]/div/div/button
          - //*[@id="yDmH0d"]//button[contains(text(), "Not now")]
  add-video-details:
    url: https://www.youtube.com/upload
    stage-items:
      add-video:
        timeout-seconds: 0  # Signal not to use webdriver wait and its conditions
        search-for:
          - //*[@id="content"]/input[@type="file"]
          - //input[@type="file"]
        actions:
          - enter_text $VIDEO_FILE_PORTRAIT
          - wait 5
      enter-video-title:
        search-for:
          - //*[@id="title-wrapper"]//*[@id="textbox"]
          #- //*[@id="title-wrapper"]//*[@id="input"]
        actions:
          - clear_text  # YouTube guesses a title for us, we don't want that.
          # We append a prefix here, because the guessed title was not cleared
          - enter_text " " $TEXT_TITLE
      enter-video-description:
        search-for:
          - //*[@id="description-wrapper"]//*[@id="textbox"]
          - //*[@id="description-wrapper"]//*[@id="description-textarea"]
          #- //*[@id="description-wrapper"]//*[@id="input"]
        actions: enter_text $TEXT_CONTENT
  add-video-playlist:
    events:
      onerror: continue
    stage-items:
      expand-play-list-options:
        search-for:
          - //*[@id="basics"]//ytcp-video-metadata-playlists
          - //*[@id="basics"]//ytcp-video-metadata-playlists/ytcp-text-dropdown-trigger
          - //*[@id="basics"]//ytcp-video-metadata-playlists/ytcp-text-dropdown-trigger/ytcp-dropdown-trigger
          - //*[@id="basics"]//ytcp-video-metadata-playlists/ytcp-text-dropdown-trigger/ytcp-dropdown-trigger/div
          - //*[@id="basics"]//ytcp-video-metadata-playlists/ytcp-text-dropdown-trigger/ytcp-dropdown-trigger//span[contains(text(), "Select")]
      select-play-list:
        search-for:
          - //*[@id="items"]//span[contains(text(), "${YOUTUBE_PLAYLIST_NAME}")]
          - //*[@id="items"]/ytcp-ve[1]/li
#          - //*[@id="items"]/ytcp-ve[1]/li//span[contains(text(), "${YOUTUBE_PLAYLIST_NAME}")]
        actions: click
      confirm-playlist:
        expected:
          actions: not is_displayed
        events:
          onerror: retry 1
        search-for:
          - //*[@id="dialog"]/div[2]/ytcp-button[2]/div
          - //*[@id="dialog"]//div[contains(text(), "Done")]
  audience:
    stage-items:
      # Without this an error will be displayed when we try to move to the next stage
      specify-age-restrictions:
        search-for:
          - //*[@id="audience"]//*[contains(text(), "not made for kids")]
          - //*[@id="audience"]/ytkc-made-for-kids-select//*[@id="radioLabel"]/*[contains(text(), "not made for kids")]
          - //*[@id="audience"]/ytkc-made-for-kids-select//tp-yt-paper-radio-group/tp-yt-paper-radio-button//*[contains(text(), "not made for kids")]
          - //*[@id="audience"]/ytkc-made-for-kids-select//tp-yt-paper-radio-group//*[@id="radioLabel"]
          - //*[@id="audience"]/ytkc-made-for-kids-select//tp-yt-paper-radio-group//*[@id="radioLabel"]/*[contains(text(), "not made for kids")]
          - //*[@id="audience"]/ytkc-made-for-kids-select//tp-yt-paper-radio-group/tp-yt-paper-radio-button[2]
  proceed:
    stage-items:
      click-next-button:
        search-for:
          - //*[@id="next-button"]
          - //*[@id="next-button"]/div
          - //*[@id="next-button"]//*[contains(text(), "Next")]
        actions:
          - wait 2
          - click
  related-video:
    events:
      onerror: run_stages proceed
      onsuccess: run_stages proceed
    stage-items:
      expand-options:
        search-for:
          - //*[@id="shorts-content-links-add-button"]
          - //*[@id="shorts-content-links-add-button"]/div[contains(text(), "Add")]
      select-related-video:
        search-for:
          # We select the first video in the list. If we want to select a specific video:
          # //*[@id="dialog"]/div[2]/div/ytcp-video-pick-dialog-contents/div/div/div/ytcp-entity-card//span[starts-with(text(), "${youtube.video.related.title}")]
          - //*[@id="dialog"]//ytcp-video-pick-dialog-contents//ytcp-entity-card[1]
          - //*[@id="dialog"]//ytcp-video-pick-dialog-contents//ytcp-entity-card[1]/*[@id="content"]
          - //*[@id="dialog"]//ytcp-entity-card[1]
          - //*[@id="dialog"]//ytcp-entity-card[1]/*[@id="content"]
  checks:
    events:
      onstart: run_stages proceed
  visibility:
    stage-items:
      select-visibility:
        search-for:
          - //*[@id="radioLabel"]/tp-yt-paper-radio-button[contains(text(), "Public")]
          - //*[@id="privacy-radios"]/tp-yt-paper-radio-button[contains(text(), "Public")]
          - //*[@id="radioLabel"]/*[contains(text(), "Public")]
          - //*[@id="privacy-radios"]/tp-yt-paper-radio-button/*[contains(text(), "Public")]
        actions:
          - click
          - wait 2 # The button text changes based on the selected visibility
  publish-video:
    stage-items:
      click-publish-button:
        search-for:
          - //*[@id="done-button"]
          - //*[@id="done-button"]/div
  wait-for-video-link:
    events:
      onerror: continue
    stage-items:
      save-video-link:
        timeout-seconds: 60
        search-for: //*[@id="share-url"]
        actions:
          - get_text
          # Save to current action's results dir, app input dir and user input dir
          - save_text $results.me[0] youtube-video-link.txt
  subtitles:
    #"ar", "bn", "de", "es", "fr", "hi", "it", "ja", "ko", "ru", "zh", "zh-TW"
    languages:
      - code: de
        name: German
      - code: fr
        name: French
      - code: es
        name: Spanish
      - code: it
        name: Italian
      - code: ru
        name: Russian
      - code: ja
        name: Japanese
      - code: ko
        name: Korean
      - code: zh
        name: Chinese
      - code: ar
        name: Arabic
      - code: hi
        name: Hindi
    iteration:
      index_variable: youtube-subtitles-idx
      end: 10
    events:
      onerror: continue
    stage-items:
      subtitles-link:
        actions:
          - get_file_content ${CONTENT_DIR}/youtube-video-link.txt
          - eval importlib.import_module('urllib.parse').urlparse('${results.me[0]}').path
          - eval importlib.import_module('os').path.basename('${results.me[1]}')
          - set_context_values youtube-edit-subtitles-link=https://studio.youtube.com/video/${results.me[2]}/translations
          - eval ${self.stages.subtitles.languages}[${context.youtube-subtitles-idx}]
          - eval ${results.me[4]}['code']
          - eval ${results.me[4]}['name']
          - set_context_values youtube-edit-subtitles-code=${results.me[5]}
          - set_context_values youtube-edit-subtitles-name=${results.me[6]}
      open-page:
        actions: browse_to $context.youtube-edit-subtitles-link
      click-add-language-button:
        search-for: //*[@id="add-translations-button"]/div[text()="Add language"]
      select-subtitles-language:
        search-for: //*[@id="paper-list"]//*[@test-id="${context.youtube-edit-subtitles-code}"]
      hover-over-edit-icon:
        search-for:
          # id="row-container" and contains an element at any depth containing the text "German"
          - //*[@id="row-container" and contains(.//*, "${context.youtube-edit-subtitles-name}")]//*[@id="status-with-icon-container"]
        actions:
          - move_to_element
          - wait 2
      click-edit-icon:
        search-for:
          # id="row-container" and contains an element at any depth containing the text "German"
          - //*[@id="row-container" and contains(.//*, "${context.youtube-edit-subtitles-name}")]//*[@id="captions-add"]
      # The file dialog is displayed, only when we click this button
      click-upload-file:
        search-for: //*[@id="choose-upload-file"]
      # We want to click the cancel button, but it has no size and location
      # even though it is visible. Since the button is visible on screen,
      # we decide to click on its position. We tried getting to the button's
      # position using our inbuilt `move_to_element`. This did not work as the
      # button does not have size and location. So we plot the position of the
      # cancel button relative to the continue button. The continue button is
      # locatable while the cancel button is not, despite both buttons being
      # adjacent to each other. When we get to the position, we click.
      # Other more logical ways, did not work, before we settled for this.
      cancel-filetype-options:
        # This is not the button we will eventually click. It is just
        # a reference button we use the plot the position to click.
        search-for: //*[@id="dialog-buttons"]//*[@id="confirm-button"]/div[text()="Continue"]
        actions:
          - enable_cursor
          - execute_script_on arguments[0].scrollIntoView(true);
          - execute_script_on arguments[0].focus();
          - move_to_element_offset top-left -48 12
          - click false
          - wait 10
      add-subtitles-file:
        # There are many file inputs, so we differentiate as much as possible
        search-for: //*[@id="captions-file-loader" and @type="file" and @class="style-scope ytve-captions-editor-upload-dialog"]
        actions:
          - get_first_file ${CONTENT_DIR}/subtitles ${context.youtube-edit-subtitles-code}.vtt
          - execute_script_on arguments[0].focus();
          - enter_text $results.me[0]
          - wait 10
      publish-subtitles:
        search-for:
          - //*[@id="publish-button"]/div[text()="Publish"]
          - //*[@id="publish-button"]
        actions:
          - click
          - wait 3
